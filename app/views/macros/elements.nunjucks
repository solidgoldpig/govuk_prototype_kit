{% macro blockHeading(name, heading='', size='medium') -%}
{% set sizes = {
	'xlarge': 'h1',
	'large': 'h2',
	'medium': 'h3',
	'small': 'h4'
} %}
{% set heading = getFormattedProp(name, 'heading', { value: heading }) %}
{% set size = getElementProp(name, 'size', { value: size, defaultValue: 'medium' } ) %}
	<{{ sizes[size] }} class="heading-{{ size }}">{{ heading }}</{{ sizes[size] }}>
{%- endmacro %}

{% macro blockLede(name, lede='') %}
{% set lede = getFormattedProp(name, 'lede', { value: lede }) %}
{% if lede %}
	<p class="lede">{{ lede }}</p>
{% endif %}
{% endmacro %}

{% macro page_header(name, heading='', heading_size='', lede='', start_page='') %}
{% set defaultHeadingSize = 'xlarge' if start_page else 'large' %}
{% set heading_size = getElementProp(name, 'heading_size', defaultHeadingSize, { value: heading_size }) %}
	{{ blockHeading(name, size=heading_size) }}
	{{ blockLede(name) }}
{% endmacro %}

{% macro body(name) %}
	<p>{{ getFormattedProp(name, 'body') | trim | replace("\n", "</p><p>") | safe }}</p>
{% endmacro %}

{% macro raw(name) %}
	{{ getFormattedProp(name, 'body') | safe }}
{% endmacro %}

{% macro formGroup(name, error='') -%}
	<div class="form-group{% if error %} error{% endif %}">
	{% if caller %}
	{{ caller() }}
	{% endif %}
	</div>
{%- endmacro %}

{% macro controlLabel(name, label='', sublabel='', hint='', optional='') -%}
{% set label = getElementProp(name, 'label', name, { value: label }) %}
{% set optional = getElementProp(name, 'optional', { value: optional }) %}
{% set hint = getElementProp(name, 'hint', { value: hint }) %}
	<label xclass="form-label-bold" for="{{ name }}">
		<span class="form-label-bold">{{ label }}{% if optional %} (optional){% endif %}</span>
		{% if hint %}
			<span class="form-hint">
				{{ hint | safe }}
			</span>
		{% endif %}
		{{ controlError(name, error) }}
	</label>
{%- endmacro %}

{% macro controlError(name, error) -%}
{% if error %}
<span class="error-message" id="error-message-{{ name }}">{{ error }}</span>
{% endif %}
{%- endmacro %}

{% macro input(name, type='text') -%}
	{% call formGroup(name, error=error) -%}
		{{ controlLabel(name, label=label, sublabel=sublabel, hint=hint) }}
		{% set value = getValue(name) %}
		{% if type === 'text' and getElementProp(name, 'multiline') %}
			<textarea class="form-control" name="{{ name }}" id="{{ name }}">{{ value | safe }}</textarea>
		{% else %}
			<input type="{{ type }}" class="form-control" name="{{ name }}" id="{{ name }}" value="{{ value | escape }}">
		{% endif %}
	{%- endcall %}
{%- endmacro %}

{% macro text(name, value='', error='', label='', sublabel='', hint='') -%}
	{{ input(name) }}
{%- endmacro %}

{% macro number(name, value='', error='') -%}
	{{ input(name, type='number') }}
{%- endmacro %}

{% macro file(name, value='', error='') -%}
	{{ input(name, type='file') }}
{%- endmacro %}

{% macro password(name, value='', error='') -%}
	{{ input(name, type='password') }}
{%- endmacro %}

{% macro optionLabel(label) %}
	{% if option.sublabel %}
		<span class="heading-small">{{ option.label }}</span><br>
		{{ option.sublabel }}
	{% else %}
		{{ option.label }}
	{% endif %}
{% endmacro %}

{% macro fieldset(name, label='', sublabel='', inline='', elements='', group='', visually_hidden=true) %}
{% set label = getFormattedProp(name, 'label', { value: label }) %}
{% set sublabel = getFormattedProp(name, 'sublabel', { value: sublabel }) %}
{% set inline = getElementProp(name, 'inline', { value: inline }) %}
{% if not elements and getElementProp(name, 'elements') %}
{% set elements = getElementProp(name, 'elements') %}
{% endif %}
	<h2 class="heading-small">{{ label | safe }}</h2>
	{% if sublabel %}
	<p>{{ sublabel | safe }}</p>
	{% endif %}
	<fieldset{% if inline %} class="inline"{% endif %}>
		<legend{% if visually_hidden %} class="visuallyhidden"{% endif %}>
			{{ label | safe }}
		</legend>
	{% if caller %}
		{{ caller() }}
	{% endif %}
	{% if elements %}
		{{ elementMacros.group(elements=elements) }}
	{% endif %}
	</fieldset>
{% endmacro %}

{% macro radioGroup(name, inline='', reveals='', visually_hidden=true, or=false) %}
{% call fieldset(name, inline=inline) %}
		{% set reveals = getElementProp(name, 'reveals') %}
		{% set excludes = getElementProp(name, 'reveals_exclude') %}
		{% set open = false %}
		{% for option_name in getElementProp(name, 'options') %}
			{% if option_name.value %}
				{% set option = option_name %}
			{% else %}
				{% set option = getElement(option_name) %}
			{% endif %}
			{% set checked = false %}
			{% if option.value === getValue(name) %}
				{% set checked = true %}
			{% endif %}
			{% set optionReveals = reveals %}
			{% if excludes %}
				{% for val in excludes %}
					{% if val === option.value %}
						{% set optionReveals = false %}
					{% endif %}
				{% endfor %}
			{% endif %}
			{% if optionReveals and checked %}
				{% set open = true %}
			{% endif %}
			{% if loop.last %}
				{% if or %}
					<p class="form-block">or</p>
				{% endif %}	
			{% endif %}	
			<label for="{{ name }}-option-{{ loop.index }}" class="block-label"{% if optionReveals %} data-target="{{ reveals }}"{% endif %}>
				<input id="{{ name }}-option-{{ loop.index }}" type="radio" name="{{ name }}" value="{{ option.value }}"{% if checked %} checked{% endif %}{% if optionReveals %} aria-controls="{{ reveals }}"{% endif %}>
				{{ optionLabel(label) }}
			</label>
		{% endfor %}
		{% if reveals %}
			{{ reveal(reveals=reveals, open=open) }}
		{% endif %}
{% endcall %}
{% endmacro %}

{% macro reveal(reveals='', open=false) %}
{# needs to be able to pass value through explicitly #}
{% if reveals %}
	<div class="panel panel-border-narrow{% if not open %} js-hidden{% endif %}" id="{{ reveals }}" aria-hidden="{% if open %}true{% else %}false{% endif %}">
		{% call control(reveals) %}{% endcall %}
	</div>
{% endif %}
{% endmacro %}

{% macro checkboxGroup(name, inline='', or=false) %}
{% call fieldset(name, inline=inline) %}
	{% for option_name in getElementProp(name, 'options') %}
		{% if option_name.value %}
			{% set option = option_name %}
		{% else %}
			{% set option = getElementProp(option_name) %}
		{% endif %}
		{% set checked = false %}
		{% if option.value === getValue(option_name) %}
			{% set checked = true %}
		{% endif %}
		{% if loop.last %}
			{% if or %}
				<p class="form-block">or</p>
			{% endif %}	
		{% endif %}	
		<label for="{{ option_name }}" class="block-label"{% if option.reveals %} data-target="{{ option.reveals }}"{% endif %}>
			<input id="{{ option_name }}" type="checkbox" name="{{ option_name }}" value="{{ option.value }}"{% if checked %} checked{% endif %}{% if option.reveals %} aria-controls="{{ option.reveals }}"{% endif %}>
			{{ optionLabel(label) }}
		</label>
		{% if option.reveals %}
			{{ reveal(reveals=option.reveals, open=checked) }}
		{% endif %}
	{% endfor %}
{% endcall %}
{% endmacro %}

{% macro control(name, type='', value='', error='', label='', sublabel='', hint='', heading='', inline='') -%}
{% set type = getElementProp(name, 'type', 'text', { value: type }) %}
	{{ elementMacros[type](name, value=value, error=error, label=label, sublabel=sublabel, hint=hint, heading=heading, inline=inline) }}
{%- endmacro %}

{% macro group(name='', elements=[]) %}
{% if name %}
{% set elements = getElementProp(name, 'elements') %}
{% endif %}
{% for element in elements %}
	{% call control(element) %}{% endcall %}
{% endfor %}
{% endmacro %}

{% set elementMacros = {
	heading: blockHeading,
	lede: blockLede,
	body: body,
	page_header: page_header,
	label: controlLabel,
	input: input,
	text: text,
	number: number,
	password: password,
	file: file,
	radioGroup: radioGroup,
	checkboxGroup: checkboxGroup,
	fieldset: fieldset,
	group: group
} %}

{#

* errors
	- error / notification type
	- errors object
	- explicit error

* required fields

* "model" values??


#}

{#
{% if inline === '' %}
{% if getElementProp(name, 'inline') === false %}
{% set inline = false %}
{% else %}
{% set inline = true %}
{% endif %}
{% endif %}
#}
